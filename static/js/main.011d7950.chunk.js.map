{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","props","todos","handleChange","userId","className","map","todo","classNames","completed","type","readOnly","checked","title","onClick","id","BASE_URL","loadUser","a","fetch","response","json","CurrentUser","state","user","this","setState","prevProps","reloadUser","clearUser","name","email","phone","React","Component","App","query","showOnly","selectedUserId","handleInput","event","target","value","sortBy","filterby","filteredTodos","filter","toLocaleLowerCase","includes","then","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.011d7950.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n  todos: Todo[];\n  handleChange: (userId: number) => void;\n  userId: number;\n}\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const { todos, handleChange, userId } = props;\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              className={classNames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames('TodoList__user-button', 'button', {\n                  'TodoList__user-button--selected': todo.userId === userId,\n                })}\n                type=\"button\"\n                onClick={() => {\n                  handleChange(todo.userId);\n                }}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport function GetTodo(): Promise<Todo[]> {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n}\n\nexport const loadUser = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { loadUser } from '../../api/api';\n\ninterface Props {\n  userId: number;\n  clearUser: () => void;\n}\n\ninterface State {\n  user: User | null;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    const user = await loadUser(this.props.userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.reloadUser(this.props.userId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await loadUser(userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    if (!user) {\n      return (\n        <div>No user selected</div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button type=\"button\" className=\"btn btn-primary\" onClick={() => clearUser()}>Clear User</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { GetTodo } from './api/api';\n\ninterface State {\n  query: string;\n  showOnly: string;\n  todos: Todo[] | [];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    query: '',\n    showOnly: '',\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    GetTodo()\n      .then((response) => {\n        this.setState({ todos: response });\n      });\n  }\n\n  handleChange = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLInputElement> |\n  React.ChangeEvent<HTMLSelectElement>) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      [name]: value,\n    } as unknown as Pick<State, keyof State>);\n  };\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  sortBy = (filterby: string) => {\n    const filteredTodos = [...this.state.todos].filter(todo => (\n      (todo.title.toLocaleLowerCase().includes(this.state.query.toLocaleLowerCase()))));\n\n    switch (filterby) {\n      case 'active':\n        return filteredTodos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return filteredTodos.filter(todo => todo.completed);\n\n      case 'all':\n        return filteredTodos;\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  render() {\n    const { selectedUserId, query, showOnly } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <div className=\"row align-items-start\">\n            <input\n              type=\"text\"\n              name=\"query\"\n              placeholder=\"Search\"\n              value={query}\n              className=\"form-control col\"\n              onChange={this.handleInput}\n            />\n            <select\n              name=\"showOnly\"\n              className=\"form-select col\"\n              aria-label=\"Default select example\"\n              value={this.state.showOnly}\n              onChange={this.handleInput}\n            >\n              <option value=\"\" disabled>Show only</option>\n              <option value=\"all\">all</option>\n              <option value=\"active\">active</option>\n              <option value=\"completed\">completed</option>\n            </select>\n          </div>\n          <TodoList\n            todos={this.sortBy(showOnly)}\n            handleChange={this.handleChange}\n            userId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clearUser={this.clearUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}